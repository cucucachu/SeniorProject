package com.codey.OpenGL;

import java.io.*;
import java.util.Date;
import java.util.ArrayList;
import java.util.zip.ZipOutputStream;
import java.text.SimpleDateFormat;

public class Librarian {

	private static String conservationFileName;
	private static String simulationFileName;
	private static String performanceFileName;
	
	private Writer conservationWriter;
	private Writer performanceWriter;
	private ZipOutputStream conservationZipper;
	private ZipOutputStream performanceZipper;
	
	private ArrayList<Particle> particles;
	private Conservationist colin;
	
	private long lastTime;
	private boolean zipFiles;
	
	public Librarian(ArrayList<Particle> particles, Conservationist colin) 
		throws FileNotFoundException, UnsupportedEncodingException {
		
		this.particles = particles;
		this.colin = colin;
		
		zipFiles = false;
		conservationWriter = null;
		performanceWriter = null;
		conservationZipper = null;
		performanceZipper = null;
	}
	
	public void start() throws UnsupportedEncodingException, FileNotFoundException {
		if (conservationFileName.toLowerCase().compareTo("none") != 0) {
			File conservationFile = new File(addDateToFileName(conservationFileName));
			conservationWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(conservationFile), "UTF-8"));
		}
		
		if (performanceFileName.toLowerCase().compareTo("none") != 0) {
			File performanceFile = new File(addDateToFileName(performanceFileName));
			performanceWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(performanceFile), "UTF-8"));
		}	
		lastTime = System.nanoTime();
		
	}

	/*  ------------------------------------------------------------
	 *  File Name Setting Methods
	 *  ------------------------------------------------------------
	 */
	
	public void setConservationFileName(String path) {
	    	conservationFileName = path;
	}
	
	public void setPerformanceFileName(String path) {
		performanceFileName = path;
	}
	
	public void setSimulationFileName(String path) {
		simulationFileName = path;
	}
	
	public String addDateToFileName(String file) {
		String extension = file.substring(file.indexOf('.'));
		String name = file.substring(0, file.indexOf('.'));
		Date date = new Date();
		SimpleDateFormat format = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss");
		
		return name + "_" + format.format(date) + extension;
	}
	/*  ------------------------------------------------------------
	 *  File Writing Methods
	 *  ------------------------------------------------------------
	 */
	
	public String recordSimulation(String optionsString) throws IOException {
		BufferedWriter simulationWriter;
		File simulationFile = null;
		
		if (simulationFileName.toLowerCase().compareTo("none") != 0) {
			File simulationFile = new File(addDateToFileName(simulationFileName));
			simulationWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(simulationFile), "UTF-8"));	
			
			simulationWriter.write(optionsString);
			
			simulationWriter.write("Particles:\n");
			for (Particle particle : particles)
				simulationWriter.write(particle.toString());	
			
			simulationWriter.close();
			return simulationFile.getAbsolutePath();
		}
		
	}
	
	public void recordPerformance(int step) throws IOException {
		long now;

		if (performanceWriter == null)
			return;
		
		now = System.nanoTime();
		
		if (step == 0) {
			performanceWriter.write("Step, Time since last step (ns) \n");
			performanceWriter.write("0, 0\n");
		}
		else 
			performanceWriter.write(String.format("%d, %d\n", step, now - lastTime));
			
		lastTime = now;
	}
	
	public void recordConservation(int step) throws IOException {
		if (conservationWriter == null)
			return;
		
		if (step == 0)
			conservationWriter.write("Step, Energy, Linear Momentum, Angular Momentum\n");
		

		conservationWriter.write(String.format("%d", step));
		conservationWriter.write(String.format(", %f", colin.energyDeviation() * 100));
		conservationWriter.write(String.format(", %f", colin.linearMomentumDeviation() * 100));
		conservationWriter.write(String.format(",  %f", colin.angularMomentumDeviation() * 100));
		conservationWriter.write("\n");
	}
	
	public void setZipFiles(Boolean zip) {
		zipFiles = zip;
	}
	
	public void janitor() throws IOException {
		if (conservationWriter != null)
			conservationWriter.close();

		if (performanceWriter != null)
			performanceWriter.close();
	}
}
