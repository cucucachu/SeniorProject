package com.codey.OpenGL;

import java.util.ArrayList;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

public class OctNode {
	private Vector3D position;
	private double width;
	private double mass;
	private double theta;
	
	private ArrayList<Particle> particles;

	private OctNode NNW;
	private OctNode NNE;
	private OctNode NSW;
	private OctNode NSE;
	private OctNode FNW;
	private OctNode FNE;
	private OctNode FSW;
	private OctNode FSE;
	
	public OctNode(Vector3D position, double width, double theta, ArrayList<Particle> particles) {
		this.position = position;
		this.theta = theta;
		this.width = width;
		this.particles = particles;
		
		this.mass = 0;
		
		for (Particle particle : particles) {
			this.mass += particle.getMass();
		}
		
		if (particles.size() > 1)
			divide();
		else
			NNW = NNE = NSW = NSE = FNW = FNE = FSW = FSE = null;

	}
	
	public void divide() {
		ArrayList<Particle> particlesNNW;
		ArrayList<Particle> particlesNNE;
		ArrayList<Particle> particlesNSW;
		ArrayList<Particle> particlesNSE;
		ArrayList<Particle> particlesFNW;
		ArrayList<Particle> particlesFNE;
		ArrayList<Particle> particlesFSW;
		ArrayList<Particle> particlesFSE;

		Vector3D positionNNW;
		Vector3D positionNNE;
		Vector3D positionNSW;
		Vector3D positionNSE;
		Vector3D positionFNW;
		Vector3D positionFNE;
		Vector3D positionFSW;
		Vector3D positionFSE;
		
		double x = position.getX();
		double y = position.getY();
		double z = position.getZ();
		
		particlesNW = new ArrayList<Particle>();
		particlesNE = new ArrayList<Particle>();
		particlesSW = new ArrayList<Particle>();
		particlesSE = new ArrayList<Particle>();
		
		for (Particle particle : particles) {
			if (particle.getX() < x && particle.getY() > y)
				particlesNW.add(particle);
			else if (particle.getX() > x && particle.getY() > y)
				particlesNE.add(particle);
			else if (particle.getX() < x && particle.getY() < y)
				particlesSW.add(particle);
			else
				particlesSE.add(particle);
		}

		positionNW = new Vector3D(x - (width / 4.), y + (width / 4.), 0);
		positionNE = new Vector3D(x + (width / 4.), y + (width / 4.), 0);
		positionSW = new Vector3D(x - (width / 4.), y - (width / 4.), 0);
		positionSE = new Vector3D(x + (width / 4.), y - (width / 4.), 0);
		
		NW = new OctNode(positionNW, this.width / 2., theta, particlesNW);
		NE = new OctNode(positionNE, this.width / 2., theta, particlesNE);
		SW = new OctNode(positionSW, this.width / 2., theta, particlesSW);
		SE = new OctNode(positionSE, this.width / 2., theta, particlesSE);
	}
	
	public ArrayList<Particle> reducedParticles(Vector3D position) {
		ArrayList<Particle> reduced;
		double distance;

		reduced = new ArrayList<Particle>();
		
		if (particles.size() == 0)
			return reduced;
		
		if (particles.size() == 1)
			return particles;
		
		distance = this.position.subtract(position).getNorm();
		
		if (distance < theta) {
			reduced.add(new Particle(this.position, this.mass));
			return reduced;
		}

		reduced.addAll(NW.reducedParticles(position));
		reduced.addAll(NE.reducedParticles(position));
		reduced.addAll(SW.reducedParticles(position));
		reduced.addAll(SE.reducedParticles(position));
		
		return reduced;
			
	}
	
	public double getX() {
		return position.getX();
	}
	
	public double getY() {
		return position.getY();
	}
	
	public double getZ() {
		return position.getZ();
	}
	
	public double getWidth() {
		return width;
	}
	
	public OctNode getNW() {
		return NW;
	}
	
	public OctNode getNE() {
		return NE;
	}
	
	public OctNode getSW() {
		return SW;
	}
	
	public OctNode getSE() {
		return SE;
	}
	
	public double getMass() {
		return this.mass;
	}
}
