package com.codey.OpenGL;
import java.util.ArrayList;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

public class Conservationist {

	private ArrayList<Particle> particles;
	private double totalEnergy;
	private double initialLinearMomentum;
	private double initialAngularMomentum;
	private double tolerance;
	
	public Conservationist(ArrayList<Particle> particles, double tolerance) {
		this.particles = particles;
		this.tolerance = tolerance;
	}
	
	public boolean energyConserved() {
		double currentEnergy;
		
		currentEnergy = energy();
		
		return (currentEnergy < totalEnergy + (totalEnergy * tolerance)
				&& currentEnergy > totalEnergy - (totalEnergy * tolerance));
	}
	
	public boolean linearMomentumConserved() {
		double currentLinearMomentum;
		double delta;
		
		currentLinearMomentum = linearMomentum();
		delta = initialLinearMomentum * tolerance;
		
		return (currentLinearMomentum < initialLinearMomentum + delta
				&& currentLinearMomentum > initialLinearMomentum - delta);
		
	}
	
	public boolean angularMomentumConserved() {
		double currentAngularMomentum;
		double delta;
		
		currentAngularMomentum = linearMomentum();
		delta = initialLinearMomentum * tolerance;
		
		return (currentLinearMomentum < initialLinearMomentum + delta
				&& currentLinearMomentum > initialLinearMomentum - delta);
		
	}
	
	private double energy() {
		return kineticEnergy() + potentialEnergy();
	}
	
	private double kineticEnergy() {
		
	}
	
	private double potentialEnergy() {
		
	}
	
	private double linearMomentum() {
		
	}
	
	private double angularMomentum() {
		
	}
}
