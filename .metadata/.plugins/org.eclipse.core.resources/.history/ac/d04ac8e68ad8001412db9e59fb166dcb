package com.codey.OpenGL;

import java.util.ArrayList;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

public class QuadNode {
	private Vector3D position;
	private double width;
	private double mass;
	private double theta;
	
	private ArrayList<Particle> particles;

	private QuadNode NW;
	private QuadNode NE;
	private QuadNode SW;
	private QuadNode SE;
	
	public QuadNode(Vector3D position, double width, double theta, ArrayList<Particle> particles) {
		this.position = position;
		this.theta = theta;
		this.width = width;
		this.particles = particles;
		
		this.mass = 0;
		
		for (Particle particle : particles) {
			this.mass += particle.getMass();
		}
		
		try {
			if (particles.size() > 1)
				divide();
		}
		catch (Exception ex) {
			System.out.println(ex);
		}
	}
	
	private void divide() throws Exception {
		ArrayList<Particle> particlesNW;
		ArrayList<Particle> particlesNE;
		ArrayList<Particle> particlesSW;
		ArrayList<Particle> particlesSE;

		Vector3D positionNW;
		Vector3D positionNE;
		Vector3D positionSW;
		Vector3D positionSE;
		
		if (particles.isEmpty() || particles.size() == 1)
			throw new Exception("Tried to divide a quadnode with one or zero particles.");
		
		particlesNW = new ArrayList<Particle>();
		particlesNE = new ArrayList<Particle>();
		particlesSW = new ArrayList<Particle>();
		particlesSE = new ArrayList<Particle>();
		
		for (Particle particle : particles) {
			if (particle.getX() < x && particle.getY() > y)
				particlesNW.add(particle);
			else if (particle.getX() > x && particle.getY() > y)
				particlesNE.add(particle);
			else if (particle.getX() < x && particle.getY() < y)
				particlesSW.add(particle);
			else
				particlesSE.add(particle);
		}

		positionNW = new Vector3D(this.x / 2., (this.y * 2) - (this.y / 2.), 0);
		positionNE = new Vector3D((this.x * 2) - (this.x / 2.), (this.y * 2) - (this.y / 2.), 0)
		positionSW = new Vector3D(this.x / 2., this.y / 2., this.width / 2., 0);
		positionSE = new Vector3D((this.x * 2) - (this.x / 2.), this.y / 2., 0);
		
		NW = new QuadNode( this.width / 2., theta, particlesNW);
		NE = new QuadNode( this.width / 2.,  theta, particlesNE);
		SW = new QuadNode(  theta, particlesSW);
		SE = new QuadNode( this.width / 2.,  theta, particlesSE);
	}
	
	public ArrayList<Particle> reducedParticles(Vector3D position) {
		double distance;
		
		if (particles.size() == 0)
			return null;
		
		if (particles.size() == 1)
			return particles;
		
		distance = 
	}
	
	public double getX() {
		return this.x;
	}
	
	public double getY() {
		return this.y;
	}
	
	public double getMass() {
		return this.mass;
	}
}
