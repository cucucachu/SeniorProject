package com.codey.OpenGL;

import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;
import java.awt.Color;

import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.lwjgl.LWJGLException;

public class Simulation {

	public static final int WIDTH = 1920;
	public static final int HEIGHT = 1080;
	public static final int FRAME_RATE = 32;
	
	private Painter picaso;
	private CameraMan carl;
	private Conservationist colin;
	
	public ArrayList<Particle> particles;
	private Vector3D stars[];
	public SSGravitationalForce gravity;
	private static int step = 0;
	
	private double gravitationalConstant;
	private double conservationTolerance;
	private double barnesHutTheta;
	private int timeStep;
	private int maxStep;
	private boolean showOctTree;
	private boolean breakOnEnergyNotConserved;
	private boolean outputConservationInfo;
	
	public Simulation(File inputFile) throws Exception {
		particles = new ArrayList<Particle>();
		
		readInputFile(inputFile);
		
		initialize();
		
		simulate();
		
		cleanUp();
	}
	
	private void initialize() throws LWJGLException {
		picaso = new Painter(WIDTH, HEIGHT, FRAME_RATE);
		carl = new CameraMan();
		colin = new Conservationist(particles, conservationTolerance, gravitationalConstant);
		gravity = new SSGravitationalForce(gravitationalConstant, particles, barnesHutTheta);
		carl.setParticles(particles);
	}
	
	private void simulate() throws Exception {	
		Vector3D forces[];
		int i;
		boolean nonConservative;
		
		Writer writer;
		File csv = new File("/home/cody/School/Senior Project/python/SolarSystemConservation(theta=0).csv");
		
		nonConservative = false;
		
		if (!csv.exists())
			csv.createNewFile();
		
		writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(csv, false), "UTF-8"));
		
		writer.write("Step, Energy, Linear Momentum, Angular Momentum\n");
		
		System.out.println("Step, Energy, Linear Momentum, Angular Momentum");
		
		while(!picaso.isCloseRequested() && step < maxStep) {
			
			picaso.checkForDisplayResize();
			picaso.clear();
			
			carl.setup();
			
			forces = new Vector3D[particles.size()];
			
			i = 0;
			for (Particle particle : particles) {
				forces[i] = gravity.forceOnParticle(particle);
				i++;
			}
			
			i = 0;
			for (Particle particle : particles) {
				particle.step(timeStep, forces[i]);
				picaso.drawParticle(particle);
				i++;
			}
			
			gravity.updateOctTree();
			
			if (showOctTree)
				picaso.drawOctTree(gravity.getOctTree().getRoot());
			
			picaso.render();
			
			writer.write(String.format("%d", step));
			System.out.printf("%d", step);
			
			writer.write(String.format(", %f", colin.energyDeviation() * 100));
			System.out.printf(", %f", colin.energyDeviation() * 100);
			if (!colin.energyConserved()) {
				//System.out.println("Energy Not Conserved!");
				//break;
			}
			
			writer.write(String.format(", %f", colin.linearMomentumDeviation() * 100));
			System.out.printf(", %f", colin.linearMomentumDeviation() * 100);
			if (!colin.linearMomentumConserved()) {
				//System.out.println("Linear Momentum Not Conserved!");
				//break;
			}
			
			writer.write(String.format(",  %f", colin.angularMomentumDeviation() * 100));
			System.out.printf(", %f", colin.angularMomentumDeviation() * 100);
			if (!colin.angularMomentumConserved()) {
				//System.out.println("Angular Momentum Not Conserved!");
				//break;
			}
			
			System.out.printf("\n");
			writer.write("\n");
			
			step++;
		}
		
		writer.close();
		picaso.janitor();
		
	}
	
	private void cleanUp() {
		picaso.janitor();
	}
	
	private void readInputFile(File inputFile) throws SimulationException, FileNotFoundException {
		Scanner scanner;
		String nextLine;
		
		System.out.println("Reading input...");
		
		scanner = new Scanner(inputFile);
		
		readParameters(scanner);
		
		if (scanner.next().toLowerCase().compareTo("particles:") != 0)
			throw new SimulationException("No particles given.");
		
		while (scanner.hasNextLine()) {
			nextLine = scanner.nextLine();
			if (!nextLine.trim().isEmpty())
				readParticle(nextLine);
		}

		printInput();
		
	}
	
	private void readParameters(Scanner scanner) throws SimulationException {
		String input;
		
		try {
			
			if (!scanner.hasNext())
				throw new SimulationException("Input file is empty");
			
			input = scanner.next();

			if (input.compareTo("Gravitational_Constant:") != 0)
				throw new SimulationException("Could not locate string Gravitational_Constant:");
			
			gravitationalConstant = new Double(scanner.next());

			input = scanner.next();
			if (input.compareTo("Conservation_Tolerance:") != 0)
				throw new SimulationException("Could not locate string Conservation_Tolerance:");
			
			conservationTolerance = new Double(scanner.next());

			input = scanner.next();
			if (input.compareTo("Barnes_Hut_Theta:") != 0)
				throw new SimulationException("Could not locate string Barnes_Hut_Theta:");
			
			barnesHutTheta = new Double(scanner.next());

			input = scanner.next();
			if (input.compareTo("Time_Step:") != 0)
				throw new SimulationException("Could not locate string Time_Step:");
			
			timeStep = new Integer(scanner.next());

			input = scanner.next();
			if (input.compareTo("Max_Step:") != 0)
				throw new SimulationException("Could not locate string Max_Step:");
			
			maxStep = new Integer(scanner.next());

			input = scanner.next();
			if (input.compareTo("Show_Oct_Tree:") != 0)
				throw new SimulationException("Could not locate string Show_Oct_Tree:");
			
			if (scanner.next().toLowerCase().charAt(0) == 't')
				showOctTree = true;
			else
				showOctTree = false;

			input = scanner.next();
			if (input.compareTo("Strict_Conversion:") != 0)
				throw new SimulationException("Could not locate string Strict_Conversion:");
			
			if (scanner.next().toLowerCase().charAt(0) == 't')
				breakOnEnergyNotConserved = true;
			else
				breakOnEnergyNotConserved = false;

			input = scanner.next();
			if (input.compareTo("Output_Conversion_Info:") != 0)
				throw new SimulationException("Could not locate string Output_Conversion_Info:");
			
			if (scanner.next().toLowerCase().charAt(0) == 't')
				outputConservationInfo = true;
			else
				outputConservationInfo = false;
		}
		catch (Exception ex) {
			throw new SimulationException(ex.getMessage());
		}
	}
	
	// Reads a particle in format "P mass < position > < velocity > radius color"
	// Position and velocity given as a space-separated tuple i.e. "< 0 0 0 >" is the origin
	// Color can be a one of the following string values:
	//    grey, white, red, green, blue
	private void readParticle(String input) throws SimulationException   {
		Scanner scanner;
		Vector3D position;
		Vector3D velocity;
		double x, y, z;
		double mass;
		double radius;
		String colorString;
		Color color;
		Particle particle;

		scanner = new Scanner(input);
		
		if (scanner.next().toLowerCase().charAt(0) != 'p') {
			scanner.close();
			throw new SimulationException("Bad format when reading a particle line");
		}
		
		mass = scanner.nextDouble();
		
		scanner.next(); // eat up '<'
		x = scanner.nextDouble();
		y = scanner.nextDouble();
		z = scanner.nextDouble();
		position = new Vector3D(x, y, z);
		scanner.next(); // eat up '>' 
		
		scanner.next(); // eat up '<'
		x = scanner.nextDouble();
		y = scanner.nextDouble();
		z = scanner.nextDouble();
		velocity = new Vector3D(x, y, z);
		scanner.next(); // eat up '>' 
		
		radius = scanner.nextDouble();
		
		colorString = scanner.next();
		
		if (colorString.toLowerCase().compareTo("red") == 0)
			color = Color.red;
		else if (colorString.toLowerCase().compareTo("green") == 0)
			color = Color.green;
		else if (colorString.toLowerCase().compareTo("blue") == 0)
			color = Color.blue;
		else if (colorString.toLowerCase().compareTo("white") == 0)
			color = Color.white;
		else if (colorString.toLowerCase().compareTo("grey") == 0)
			color = Color.gray;
		else
			color = Color.white;
		
		particle = new Particle(position, velocity, mass, radius);
		particle.setColor(color);
		
		particles.add(particle);
		particle.print();
	
		scanner.close();
	}
	
	private void printInput() {
		System.out.println("Starting simulation with the following parameters...");
		System.out.printf("Gravitational Constant:  %f\n", gravitationalConstant);
		System.out.printf("Conservation Tolerance:  %f\n", conservationTolerance);
		System.out.printf("Barnes Hut Theta:        %f\n", barnesHutTheta);
		System.out.printf("Time Step:               %d\n", timeStep);
		System.out.printf("Max Step                 %d\n", maxStep);
		System.out.printf("Show Oct Tree            " + showOctTree + "\n");
		System.out.printf("Strict Conservation      " + breakOnEnergyNotConserved + "\n");
		System.out.printf("Output Conservation Info " + outputConservationInfo + "\n");
		
		if (!particles.isEmpty())
			System.out.println("Particles");
		
		for (Particle particle : particles)
			particle.print();
	}

}
