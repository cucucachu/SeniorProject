package com.codey.OpenGL;

import java.util.ArrayList;
import java.util.Random;

import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

public class SolarSystem {
	
	//Mass unit is 10^27 kg
	private static final double SUN_MASS = 1988.55;
	private static final double JUPITER_MASS = 1.8986;
	private static final double SATURN_MASS = 0.56846;
	private static final double NEPTUNE_MASS = 0.102430;
	private static final double URANUS_MASS = 0.086832;
	private static final double EARTH_MASS = 0.0059736;
	private static final double VENUS_MASS = 0.0048685;
	private static final double MARS_MASS =  0.00064185;
	private static final double MERCURY_MASS = 0.0003302;
	private static final double PLUTO_MASS = 0.000013105;

	// Velocity ( 4,000,000 km / 0.25 years)
	private static final Vector3D JUPITER_VELOCITY = 8.191257;
	private static final Vector3D SATURN_VELOCITY = 6.047505;
	private static final Vector3D NEPTUNE_VELOCITY = 3.409858;
	private static final Vector3D URANUS_VELOCITY = 4.2657209;
	private static final Vector3D EARTH_VELOCITY = 18.6853807;
	private static final Vector3D VENUS_VELOCITY = 21.971503;
	private static final Vector3D MARS_VELOCITY = 15.105605;
	private static final Vector3D MERCURY_VELOCITY = 29.714353;
	private static final Vector3D PLUTO_VELOCITY = 3.409858;

	private static final double SOLAR_SYSTEM_WIDTH = 1920;
	private static final double SOLAR_SYSTEM_HEIGHT = 1080;
	
	private Painter picaso;
	
	public ArrayList<Particle> particles;
	public GravitationalForce gravity;
	
	public SolarSystem(Painter picaso) {
		Particle particle;
		Random random = new Random();
		this.picaso = picaso;
		particles = new ArrayList<Particle>();
		
		//Sun
		particle = new Particle(new Vector3D(SOLAR_SYSTEM_WIDTH/2, SOLAR_SYSTEM_HEIGHT/2, 0),
								new Vector3D(0, 0, 0), 10.0);
		particles.add(particle);
		
		
		
		gravity = new GravitationalForce(0.1, particles);
	}
	
	public void run() {	
		Vector3D force;
		
		while(!picaso.isCloseRequested()) {
			picaso.checkForDisplayResize();
			picaso.clear();
			
			for (Particle particle : particles) {
				force = gravity.forceOnParticle(particle);
				particle.step(1, force);
				//picaso.drawSphere(particle.getPosition(), 1, 20); 
				picaso.drawParticle(particle);
			}
			picaso.render();
		}
		
		picaso.janitor();
	}
	
	private Vector3D randomPointOnCircle(double radius) {
		Random randomGenerator;
		double theta, x, y;
		
		randomGenerator = new Random();
		
		theta = 2 * Math.PI * randomGenerator.nextDouble();
		x = radius * Math.cos(theta);
		y = radius * Math.sin(theta);
		
		return new Vector3D(x, y, 0.0);
	}
	
	private Vector3D velocityVector(Vector3D position, double velocity) {
		Vector3D v;
		double theta;
		
		theta = Math.atan2(position.getY(), position.getX()) + (Math.PI / 2.0);
		v = new Vector3D(Math.cos(theta), Math.sin(theta), 0);
		return v.scalarMultiply(velocity);
	}
}
