package com.codey.OpenGL;

import java.util.ArrayList;
import java.util.Random;

import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import static org.apache.commons.math3.util.FastMath.toDegrees;

public class SolarSystem {
	
	//Mass unit is 10^27 kg
	private static final double SUN_MASS = 1988.55;
	private static final double JUPITER_MASS = 1.8986;
	private static final double SATURN_MASS = 0.56846;
	private static final double NEPTUNE_MASS = 0.102430;
	private static final double URANUS_MASS = 0.086832;
	private static final double EARTH_MASS = 0.0059736;
	private static final double VENUS_MASS = 0.0048685;
	private static final double MARS_MASS =  0.00064185;
	private static final double MERCURY_MASS = 0.0003302;
	private static final double PLUTO_MASS = 0.000013105;
	

	// Distance unit 1,000,000 km
	private static final double JUPITER_DISTANCE = 778.30821/4.;
	private static final double SATURN_DISTANCE = 1426.666422/4.;
	private static final double NEPTUNE_DISTANCE = 4498.396441/4.;
	private static final double URANUS_DISTANCE = 2870.658186/4.;
	private static final double EARTH_DISTANCE = 149.598262/4.;
	private static final double VENUS_DISTANCE = 108.209475/4.;
	private static final double MARS_DISTANCE = 227.943824/4.;
	private static final double MERCURY_DISTANCE = 57.909227/4.;
	private static final double PLUTO_DISTANCE = 5906.38/4.;
	

	// Velocity ( 1,000,000 km / hr)
	private static final double JUPITER_VELOCITY = 0.047002/4.;
	private static final double SATURN_VELOCITY = 0.034701/4.;
	private static final double NEPTUNE_VELOCITY = 0.019566/4.;
	private static final double URANUS_VELOCITY = 0.024477/4.;
	private static final double EARTH_VELOCITY = 0.107218/4.;
	private static final double VENUS_VELOCITY = 0.126074/4.;
	private static final double MARS_VELOCITY = 0.086677/4.;
	private static final double MERCURY_VELOCITY = 0.17053/4.;
	private static final double PLUTO_VELOCITY = 0.019566/4;

	private static final double SUN_RADIUS = 5;//50;
	private static final double JUPITER_RADIUS = 40;
	private static final double SATURN_RADIUS = 35;
	private static final double NEPTUNE_RADIUS = 30;
	private static final double URANUS_RADIUS = 31;
	private static final double EARTH_RADIUS = 10;
	private static final double VENUS_RADIUS = 7;
	private static final double MARS_RADIUS = 8;
	private static final double MERCURY_RADIUS = 6;
	private static final double PLUTO_RADIUS = 1;

	private static final double[] SUN_COLOR = {1.,1.,0};
	private static final double[] JUPITER_COLOR = {.97,.46,.19};
	private static final double[] SATURN_COLOR = {1.,.9,.65};
	private static final double[] NEPTUNE_COLOR = {.16,.23,.7};
	private static final double[] URANUS_COLOR = {.2,.3,.6};
	private static final double[] EARTH_COLOR = {0.,.55,.27};
	private static final double[] VENUS_COLOR = {.71,.65,.26};
	private static final double[] MARS_COLOR = {.95,.4,.0};
	private static final double[] MERCURY_COLOR = {.8,.75,.44};
	private static final double[] PLUTO_COLOR = {.85,.96,.94};

	private static final double SOLAR_SYSTEM_WIDTH = 1920;
	private static final double SOLAR_SYSTEM_HEIGHT = 1080;
	private static final int BACKGROUND_STARS = 1000;
	private static final double STAR_DISTANCE = 3000;
	
	private static final double GRAVITATIONAL_CONSTANT = 0.000864929664/64.;
	private static final double TIME_STEP = 68.484; // 1/4 year per second
	
	private Painter picaso;
	private CameraMan carl;
	
	public ArrayList<Particle> particles;
	private Vector3D stars[];
	public SSGravitationalForce gravity;
	
	public SolarSystem(Painter picaso, CameraMan carl) {
		Particle particle;
		Random random = new Random();
		Vector3D position;
		Vector3D velocity;
		double mass;
		this.picaso = picaso;
		this.carl = carl;
		particles = new ArrayList<Particle>();
		
		makeStars();
		
		//EARTH
		position = randomPointOnCircle(EARTH_DISTANCE);
		velocity = velocityVector(position, EARTH_VELOCITY);
		System.out.printf("Earth velocity <%.2f, %.2f>\n", velocity.getX(), velocity.getY());
		mass = EARTH_MASS;
		particle = new Particle(position, velocity, mass, EARTH_RADIUS);
		particle.setColor(EARTH_COLOR);
		particles.add(particle);	
		
		//Sun
		particle = new Particle(new Vector3D(0, 0, 0),
								new Vector3D(0, 0, 0), SUN_MASS, SUN_RADIUS);
		particle.setColor(SUN_COLOR);
		particles.add(particle);
		
		
		//JUPITER
		position = randomPointOnCircle(JUPITER_DISTANCE);
		velocity = velocityVector(position, JUPITER_VELOCITY);
		mass = JUPITER_MASS;
		particle = new Particle(position, velocity, mass, JUPITER_RADIUS);
		particle.setColor(JUPITER_COLOR);
		particles.add(particle);	
		
		//SATURN
		position = randomPointOnCircle(SATURN_DISTANCE);
		velocity = velocityVector(position, SATURN_VELOCITY);
		mass = SATURN_MASS;
		particle = new Particle(position, velocity, mass, SATURN_RADIUS);
		particle.setColor(SATURN_COLOR);
		particles.add(particle);	
		
		//NEPTUNE
		position = randomPointOnCircle(NEPTUNE_DISTANCE);
		velocity = velocityVector(position, NEPTUNE_VELOCITY);
		mass = NEPTUNE_MASS;
		particle = new Particle(position, velocity, mass, NEPTUNE_RADIUS);
		particle.setColor(NEPTUNE_COLOR);
		particles.add(particle);	
		
		//URANUS
		position = randomPointOnCircle(URANUS_DISTANCE);
		velocity = velocityVector(position, URANUS_VELOCITY);
		mass = URANUS_MASS;
		particle = new Particle(position, velocity, mass, URANUS_RADIUS);
		particle.setColor(URANUS_COLOR);
		particles.add(particle);	
		
		//VENUS
		position = randomPointOnCircle(VENUS_DISTANCE);
		velocity = velocityVector(position, VENUS_VELOCITY);
		mass = VENUS_MASS;
		particle = new Particle(position, velocity, mass, VENUS_RADIUS);
		particle.setColor(VENUS_COLOR);
		particles.add(particle);	
		
		//MARS
		position = randomPointOnCircle(MARS_DISTANCE);
		velocity = velocityVector(position, MARS_VELOCITY);
		mass = MARS_MASS;
		particle = new Particle(position, velocity, mass, MARS_RADIUS);
		particle.setColor(MARS_COLOR);
		particles.add(particle);	
		
		//MERCURY
		position = randomPointOnCircle(MERCURY_DISTANCE);
		velocity = velocityVector(position, MERCURY_VELOCITY);
		mass = MERCURY_MASS;
		particle = new Particle(position, velocity, mass, MERCURY_RADIUS);
		particle.setColor(MERCURY_COLOR);
		particles.add(particle);	
		
		//PLUTO
		position = randomPointOnCircle(PLUTO_DISTANCE);
		velocity = velocityVector(position, PLUTO_VELOCITY);
		mass = PLUTO_MASS;
		particle = new Particle(position, velocity, mass, PLUTO_RADIUS);
		particle.setColor(PLUTO_COLOR);
		particles.add(particle);	

		
		gravity = new SSGravitationalForce(GRAVITATIONAL_CONSTANT, particles);
	}
	
	public void run() {	
		Vector3D force;
		
		while(!picaso.isCloseRequested()) {
			picaso.checkForDisplayResize();
			picaso.clear();
			
			carl.setup();

			drawBackground();
			for (Particle particle : particles) {
				
				force = gravity.forceOnParticle(particle);
				particle.step(TIME_STEP, force);
				picaso.drawParticle(particle);
			}
			//picaso.drawSquare(0, 0, 100);
			picaso.render();
		}
		
		picaso.janitor();
	}
	
	private void makeStars() {
		Random random;
		
		random = new Random();
		stars = new Vector3D[BACKGROUND_STARS];
		
		for (int i = 0; i < BACKGROUND_STARS; i++)
			stars[i] = randomPointOnSphere(STAR_DISTANCE);
	}
	
	private void drawBackground() {	
		for (int i = 0; i < BACKGROUND_STARS; i++) {
			picaso.drawSphere(stars[i], 1, 4);
		}
	}
	
	private Vector3D randomPointOnSphere(double radius) {
		Random randomGenerator;
		double x1, x2;
		double x, y, z;
		
		randomGenerator = new Random();
		
		do {
			x1 = (randomGenerator.nextDouble() * 2) - 1;
			x2 = (randomGenerator.nextDouble() * 2) - 1;
		}
		while ((x1 * x1) + (x2 * x2) > 1);

		x = (2. * x1) * Math.sqrt(1 - (x1 * x1) - (x2 * x2));
		y = (2. * x2) * Math.sqrt(1 - (x1 * x1) - (x2 * x2));
		z = 1 - (2 * ((x1 * x1) + (x2 * x2)));
		
		return new Vector3D(radius * x, radius * y, radius * z);
		
	}
	
	private Vector3D randomPointOnCircle(double radius) {
		Random randomGenerator;
		double theta, x, y;
		
		randomGenerator = new Random();
		
		theta = 2 * Math.PI * randomGenerator.nextDouble();
		x = radius * Math.cos(theta);
		y = radius * Math.sin(theta);
		
		return new Vector3D(x, y, 0.0);
	}
	
	private Vector3D velocityVector(Vector3D position, double velocity) {
		Vector3D v;
		double theta;
		
		theta = Math.atan2(position.getY(), position.getX()) + (Math.PI / 2.0);
		
		
		v = new Vector3D(Math.cos(theta), Math.sin(theta), 0);
		
		return v.scalarMultiply(velocity);
	}
}
